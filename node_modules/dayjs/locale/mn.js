(other: string | number | Long | Timestamp): boolean;
    toExtendedJSON(options?: EJSONOptions): number | LongExtended;
    static fromExtendedJSON(doc: {
        $numberLong: string;
    }, options?: EJSONOptions): number | Long;
    inspect(): string;
}

/** @public */
export declare interface LongExtended {
    $numberLong: string;
}

/** @public */
export declare type LongWithoutOverrides = new (low: unknown, high?: number, unsigned?: boolean) => {
    [P in Exclude<keyof Long, TimestampOverrides>]: Long[P];
};

/** @public */
export declare const LongWithoutOverridesClass: LongWithoutOverrides;

/** @public */
declare let Map_2: MapConstructor;
export { Map_2 as Map }

/**
 * A class representation of the BSON MaxKey type.
 * @public
 * @category BSONType
 */
export declare class MaxKey {
    _bsontype: 'MaxKey';
    constructor();
    /* Excluded from this release type: toExtendedJSON */
    /* Excluded from this release type: fromExtendedJSON */
    inspect(): string;
}

/** @public */
export declare interface MaxKeyExtended {
    $maxKey: 1;
}

/**
 * A class representation of the BSON MinKey type.
 * @public
 * @category BSONType
 */
export declare class MinKey {
    _bsontype: 'MinKey';
    constructor();
    /* Excluded from this release type: toExtendedJSON */
    /* Excluded from this release type: fromExtendedJSON */
    inspect(): string;
}

/** @public */
export declare interface MinKeyExtended {
    $minKey: 1;
}

/**
 * A class representation